// Insider Pilot - Production Database Schema
// OWASP ASVS 5.0 compliant data model with audit trails

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["tracing", "metrics"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core entities

model Person {
  id        String   @id @default(cuid())
  type      PersonType
  name      String
  office    String?  // Office/title for politicians
  title     String?  // Corporate title for insiders
  party     String?  // Political party (for politicians)
  state     String?  // State for politicians
  sourceRefs Json    @default("[]") // Array of source references
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  transactions Transaction[]
  watchlistItems WatchlistItem[]
  
  // Indexes for performance
  @@index([name])
  @@index([type])
  @@index([state, party]) // For politician queries
  @@map("person")
}

model Company {
  id       String  @id @default(cuid())
  name     String
  ticker   String  @unique
  cik      String? @unique // SEC Central Index Key
  exchange String?
  sector   String?
  industry String?
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  transactions Transaction[]
  watchlistItems WatchlistItem[]
  
  // Indexes
  @@index([ticker])
  @@index([cik])
  @@index([sector])
  @@map("company")
}

model Filing {
  id          String      @id @default(cuid())
  source      FilingSource
  formType    String      // Form 4, Form 3, PTR, etc.
  url         String
  filingDate  DateTime
  accessionNo String?     // SEC accession number
  rawJson     Json?       // Raw JSON data
  rawXml      String?     // Raw XML/HTML content
  checksum    String      @unique // SHA-256 of raw content for deduplication
  
  // Processing status
  status      ProcessingStatus @default(PENDING)
  processedAt DateTime?
  errorMsg    String?
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  transactions Transaction[]
  
  // Indexes
  @@index([source, formType, filingDate])
  @@index([checksum])
  @@index([status])
  @@map("filing")
}

model Transaction {
  id                  String            @id @default(cuid())
  personId            String
  companyId           String
  filingId            String
  
  // Transaction details
  tradeType           TradeType
  securityType        String            @default("Common Stock")
  quantity            Decimal?          // Number of shares/units
  price               Decimal?          // Price per share (nullable for politician trades)
  amountRange         String?           // Amount range for PTR filings
  transactionDate     DateTime
  reportedDate        DateTime
  beneficialOwnerType OwnershipType     @default(DIRECT)
  
  // Data quality
  sourceConfidence    Float             @default(1.0) // 0.0 to 1.0 confidence score
  
  // Calculated fields (updated by jobs)
  estimatedValue      Decimal?          // Calculated total value
  priceAtDate         Decimal?          // Market price on transaction date
  performanceSince    Decimal?          // % performance since transaction
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  person   Person  @relation(fields: [personId], references: [id], onDelete: Cascade)
  company  Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  filing   Filing  @relation(fields: [filingId], references: [id], onDelete: Cascade)
  
  // Indexes for high-performance queries
  @@index([personId, transactionDate(sort: Desc)])
  @@index([companyId, transactionDate(sort: Desc)])
  @@index([transactionDate(sort: Desc), tradeType])
  @@index([estimatedValue(sort: Desc)])
  @@map("transaction")
}

// User management and authentication

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("session")
}

model User {
  id                String      @id @default(cuid())
  email             String      @unique
  emailVerified     DateTime?
  name              String?
  image             String?
  role              UserRole    @default(USER)
  
  // Billing
  stripeCustomerId  String?     @unique
  plan              Plan        @default(FREE)
  planExpiresAt     DateTime?
  
  // Privacy/Compliance
  gdprRegion        Boolean     @default(false) // EU/EEA/UK/CH user
  ccpaRegion        Boolean     @default(false) // California user
  consentUpdatedAt  DateTime?
  marketingConsent  Boolean     @default(false)
  
  // Security
  lastLoginAt       DateTime?
  lastLoginIp       String?
  failedLoginCount  Int         @default(0)
  lockedUntil       DateTime?
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  accounts           Account[]
  sessions           Session[]
  watchlists         Watchlist[]
  alertSubscriptions AlertSubscription[]
  auditLogs          AuditLog[]
  
  @@index([email])
  @@index([stripeCustomerId])
  @@map("user")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  
  @@unique([identifier, token])
  @@map("verificationtoken")
}

// Watchlists and alerts

model Watchlist {
  id     String @id @default(cuid())
  userId String
  name   String
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user  User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  items WatchlistItem[]
  
  @@index([userId])
  @@map("watchlist")
}

model WatchlistItem {
  id          String  @id @default(cuid())
  watchlistId String
  personId    String?
  companyId   String?
  ticker      String? // Direct ticker watch (may not have company record yet)
  
  // Relations
  watchlist Watchlist @relation(fields: [watchlistId], references: [id], onDelete: Cascade)
  person    Person?   @relation(fields: [personId], references: [id], onDelete: Cascade)
  company   Company?  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  @@unique([watchlistId, personId])
  @@unique([watchlistId, companyId])
  @@unique([watchlistId, ticker])
  @@map("watchlist_item")
}

model AlertSubscription {
  id       String            @id @default(cuid())
  userId   String
  ruleJson Json              // Flexible rule definition
  channel  NotificationChannel
  
  // Alert settings
  enabled     Boolean @default(true)
  frequency   AlertFrequency @default(INSTANT)
  lastSentAt  DateTime?
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, enabled])
  @@map("alert_subscription")
}

// Analytics and monetization

model AdEvent {
  id          String   @id @default(cuid())
  userId      String?  // Nullable for anonymous users
  adUnitId    String   // Ad unit identifier
  eventType   AdEventType
  revenue     Decimal? // RPM calculation
  country     String?  // For geo-targeting (privacy-safe)
  
  // Privacy-safe aggregation only
  createdAt DateTime @default(now())
  
  @@index([adUnitId, eventType, createdAt])
  @@index([country, createdAt])
  @@map("ad_event")
}

// Audit and security

model AuditLog {
  id         String   @id @default(cuid())
  userId     String?  // Nullable for system actions
  action     String   // CRUD action
  entity     String   // Table/resource name
  entityId   String?  // Record ID
  metadata   Json     // Additional context
  ipAddress  String?
  userAgent  String?
  
  createdAt DateTime @default(now())
  
  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  // Indexes for audit queries
  @@index([userId, createdAt])
  @@index([entity, entityId])
  @@index([action, createdAt])
  @@map("audit_log")
}

// Background jobs tracking

model JobExecution {
  id          String      @id @default(cuid())
  jobName     String      
  status      JobStatus   @default(RUNNING)
  startedAt   DateTime    @default(now())
  completedAt DateTime?
  errorMsg    String?
  metadata    Json        @default("{}")
  
  @@index([jobName, status])
  @@index([startedAt])
  @@map("job_execution")
}

// Enums

enum PersonType {
  CORPORATE_INSIDER
  POLITICIAN
}

enum FilingSource {
  SEC
  HOUSE
  SENATE
  AGGREGATOR
}

enum TradeType {
  BUY
  SELL
  OTHER
}

enum OwnershipType {
  DIRECT
  INDIRECT
}

enum ProcessingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum UserRole {
  USER
  ADMIN
}

enum Plan {
  FREE
  PAID
}

enum NotificationChannel {
  EMAIL
  WEBPUSH
}

enum AlertFrequency {
  INSTANT
  DAILY_DIGEST
  WEEKLY_DIGEST
}

enum AdEventType {
  IMPRESSION
  CLICK
  VIEWABLE
}

enum JobStatus {
  RUNNING
  COMPLETED
  FAILED
}