/**
 * NextAuth.js Configuration - OWASP ASVS 5.0 Compliant
 * Server-side sessions with rotating tokens and security hardening
 */

import { NextAuthOptions } from "next-auth"
import { PrismaAdapter } from "@auth/prisma-adapter"
import GoogleProvider from "next-auth/providers/google"
import EmailProvider from "next-auth/providers/email"
import { prisma } from "@/lib/prisma"
import { sendVerificationEmail } from "@/lib/email"
import { getUserByEmail, createAuditLog } from "@/lib/auth-utils"

export const authOptions: NextAuthOptions = {
  adapter: PrismaAdapter(prisma),
  
  providers: [
    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID!,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,
      authorization: {
        params: {
          scope: "openid email profile",
          prompt: "consent", // Force consent screen for security
        },
      },
    }),
    
    EmailProvider({
      server: {
        host: "api.postmarkapp.com",
        port: 587,
        auth: {
          user: process.env.POSTMARK_SERVER_TOKEN,
          pass: process.env.POSTMARK_SERVER_TOKEN,
        },
      },
      from: process.env.POSTMARK_FROM_EMAIL,
      sendVerificationRequest: async ({ identifier, url, provider }) => {
        await sendVerificationEmail(identifier, url);
      },
    }),
  ],
  
  // Session configuration - server-side for security
  session: {
    strategy: "database",
    maxAge: 8 * 60 * 60, // 8 hours (shorter for financial app)
    updateAge: 60 * 60, // Update session every hour
  },
  
  // JWT configuration (for API routes)
  jwt: {
    maxAge: 60 * 60, // 1 hour
  },
  
  pages: {
    signIn: "/auth/signin",
    signOut: "/auth/signout",
    error: "/auth/error",
    verifyRequest: "/auth/verify",
    newUser: "/auth/welcome",
  },
  
  callbacks: {
    async signIn({ user, account, profile, email, credentials }) {
      // Security checks before allowing sign in
      if (!user.email) {
        console.warn("SignIn attempt without email");
        return false;
      }
      
      try {
        const existingUser = await getUserByEmail(user.email);
        
        // Check if user is locked out
        if (existingUser?.lockedUntil && new Date() < existingUser.lockedUntil) {
          console.warn(`SignIn blocked - user locked: ${user.email}`);
          return false;
        }
        
        // Rate limiting check could go here
        
        // Log successful sign in attempt
        await createAuditLog({
          userId: existingUser?.id,
          action: "SIGNIN_ATTEMPT",
          entity: "user",
          entityId: existingUser?.id,
          metadata: {
            provider: account?.provider,
            email: user.email,
          },
        });
        
        return true;
      } catch (error) {
        console.error("SignIn callback error:", error);
        return false;
      }
    },
    
    async jwt({ token, user, account, profile, trigger, session }) {
      // Include user role and plan in token
      if (user) {
        token.role = user.role;
        token.plan = user.plan;
        token.stripeCustomerId = user.stripeCustomerId;
      }
      
      // Handle session updates
      if (trigger === "update" && session) {
        token.role = session.role;
        token.plan = session.plan;
      }
      
      return token;
    },
    
    async session({ session, user, token }) {
      // Add custom fields to session
      if (user) {
        session.user.id = user.id;
        session.user.role = user.role;
        session.user.plan = user.plan;
        session.user.stripeCustomerId = user.stripeCustomerId;
        session.user.gdprRegion = user.gdprRegion;
        session.user.ccpaRegion = user.ccpaRegion;
        
        // Update last login
        await prisma.user.update({
          where: { id: user.id },
          data: {
            lastLoginAt: new Date(),
            failedLoginCount: 0, // Reset failed count on successful login
          },
        });
        
        // Log successful session creation
        await createAuditLog({
          userId: user.id,
          action: "SESSION_CREATED",
          entity: "session",
          metadata: {
            userAgent: session.user.email,
          },
        });
      }
      
      return session;
    },
    
    async redirect({ url, baseUrl }) {
      // Security: Only allow redirects to same origin
      if (url.startsWith("/")) return `${baseUrl}${url}`;
      if (new URL(url).origin === baseUrl) return url;
      return baseUrl;
    },
  },
  
  events: {
    async signIn({ user, account, profile, isNewUser }) {
      if (isNewUser && user.email) {
        // Set user region based on headers (implement in middleware)
        // Initialize user preferences
        await prisma.user.update({
          where: { email: user.email },
          data: {
            consentUpdatedAt: new Date(),
            // Set region flags based on request headers
          },
        });
      }
      
      // Log sign in event
      await createAuditLog({
        userId: user.id,
        action: "SIGNIN_SUCCESS",
        entity: "user",
        entityId: user.id,
        metadata: {
          provider: account?.provider,
          isNewUser,
        },
      });
    },
    
    async signOut({ session, token }) {
      // Log sign out
      if (session?.user?.id) {
        await createAuditLog({
          userId: session.user.id,
          action: "SIGNOUT",
          entity: "session",
          metadata: {},
        });
      }
    },
    
    async createUser({ user }) {
      // Initialize new user with security defaults
      await prisma.user.update({
        where: { id: user.id },
        data: {
          role: "USER",
          plan: "FREE",
          failedLoginCount: 0,
          marketingConsent: false,
        },
      });
      
      // Log user creation
      await createAuditLog({
        action: "USER_CREATED",
        entity: "user",
        entityId: user.id,
        metadata: {
          email: user.email,
        },
      });
    },
  },
  
  // Security configuration
  cookies: {
    sessionToken: {
      name: `${process.env.NODE_ENV === "production" ? "__Secure-" : ""}next-auth.session-token`,
      options: {
        httpOnly: true,
        sameSite: "lax",
        path: "/",
        secure: process.env.NODE_ENV === "production",
        maxAge: 8 * 60 * 60, // 8 hours
      },
    },
    callbackUrl: {
      name: `${process.env.NODE_ENV === "production" ? "__Secure-" : ""}next-auth.callback-url`,
      options: {
        httpOnly: true,
        sameSite: "lax",
        path: "/",
        secure: process.env.NODE_ENV === "production",
      },
    },
    csrfToken: {
      name: `${process.env.NODE_ENV === "production" ? "__Host-" : ""}next-auth.csrf-token`,
      options: {
        httpOnly: true,
        sameSite: "lax",
        path: "/",
        secure: process.env.NODE_ENV === "production",
      },
    },
  },
  
  // Enable debug in development only
  debug: process.env.NODE_ENV === "development",
  
  // Security: Use secure secret
  secret: process.env.NEXTAUTH_SECRET,
};

// Type extensions for NextAuth
declare module "next-auth" {
  interface Session {
    user: {
      id: string;
      email: string;
      name?: string;
      image?: string;
      role: "USER" | "ADMIN";
      plan: "FREE" | "PAID";
      stripeCustomerId?: string;
      gdprRegion: boolean;
      ccpaRegion: boolean;
    };
  }
  
  interface User {
    role: "USER" | "ADMIN";
    plan: "FREE" | "PAID";
    stripeCustomerId?: string;
    gdprRegion: boolean;
    ccpaRegion: boolean;
    failedLoginCount: number;
    lockedUntil?: Date;
  }
}